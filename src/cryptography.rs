use base64::{engine::general_purpose::URL_SAFE_NO_PAD, Engine};
use openssl::{
    pkey::{PKey, Private},
    rsa::Padding,
};
use rand::Rng;
use rand_chacha::ChaCha20Rng;
use rand_core::{OsRng, RngCore, SeedableRng};
use serde::{de::DeserializeOwned, Deserialize, Serialize};

use crate::error::{
    Base64DecodeError, ClientPayloadError, EncryptionError, Error, FromUtf8Error, InternalError,
    OpenSSLError, SerdeError,
};

pub const TOKEN_CHARSET: [char; 88] = [
    'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's',
    't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L',
    'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', '0', '1', '2', '3', '4',
    '5', '6', '7', '8', '9', '!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '-', '_', '=', '+',
    '{', '}', '[', ']', '|', '\\', '/', '?', '>', '.', '<', ',',
];

pub const CHARSET_BASE_32: [char; 32] = [
    'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S',
    'T', 'U', 'V', 'W', 'X', 'Y', 'Z', '2', '3', '4', '5', '6', '7',
];

///prepares ChaCha20Rng with a 256 bit random seed generated by rand_core::os::OsRng which retrieves randomness from the host operating system
pub fn prepare_rng() -> ChaCha20Rng {
    let mut seed = [0u8; 32];
    OsRng.fill_bytes(&mut seed);
    ChaCha20Rng::from_seed(seed)
}

pub fn generate_token(length: usize) -> String {
    let mut rng = prepare_rng();
    let mut key = String::with_capacity(length);
    for _ in 0..length {
        key.push(TOKEN_CHARSET[rng.gen_range(0..TOKEN_CHARSET.len())]);
    }
    key
}

pub fn generate_random_base32_string(length: usize) -> String {
    let mut rng = prepare_rng();
    let mut key = String::with_capacity(length);
    for _ in 0..length {
        key.push(CHARSET_BASE_32[rng.gen_range(0..CHARSET_BASE_32.len())]);
    }
    key
}

#[derive(Debug, Serialize, Deserialize)]
pub struct JsonEncryptedDataWrapper {
    pub data: String,
}

pub fn decrypt_url_safe_base64_with_private_key<T: DeserializeOwned>(
    encrypted_url_safe_base64_data: String,
    private_key: &PKey<Private>,
) -> Result<T, Error> {
    let encrypted_credentials_bytes: Vec<u8> =
        match URL_SAFE_NO_PAD.decode(encrypted_url_safe_base64_data) {
            Ok(encrypted_data_bytes) => encrypted_data_bytes,
            Err(err) => {
                return Err(
                    InternalError::ClientPayload(ClientPayloadError::UrlSafeBase64Decode(
                        Base64DecodeError(err),
                    ))
                    .into(),
                )
            }
        };
    let mut decrypted_data_buffer = vec![0; private_key.size()];

    let rsa_private = match private_key.rsa() {
        Ok(rsa_private) => rsa_private,
        Err(err) => {
            return Err(
                InternalError::Encryption(EncryptionError::RSAPrivateConversion(OpenSSLError(err)))
                    .into(),
            )
        }
    };
    let decrypted_data_len = match rsa_private.private_decrypt(
        &encrypted_credentials_bytes,
        &mut decrypted_data_buffer,
        Padding::PKCS1_OAEP,
    ) {
        Ok(decrypted_data_len) => decrypted_data_len,
        Err(err) => {
            return Err(
                InternalError::Encryption(EncryptionError::DataDecryption(OpenSSLError(err)))
                    .into(),
            )
        }
    };
    decrypted_data_buffer.truncate(decrypted_data_len);

    let decrypted_data_str: String = match String::from_utf8(decrypted_data_buffer) {
        Ok(decrypted_data_str) => decrypted_data_str,
        Err(err) => {
            return Err(
                InternalError::ClientPayload(ClientPayloadError::DataBytesToString(FromUtf8Error(
                    err,
                )))
                .into(),
            )
        }
    };
    //println!("{}", decrypted_data_str);
    let decrypted_data_struct: T = match serde_json::from_str::<T>(&decrypted_data_str) {
        Ok(decrypted_data_struct) => decrypted_data_struct,
        Err(err) => {
            return Err(
                InternalError::ClientPayload(ClientPayloadError::DataDeserialisation(SerdeError(
                    err,
                )))
                .into(),
            )
        }
    };

    Ok(decrypted_data_struct)
}
