use rand::Rng;
use rand_chacha::ChaCha20Rng;
use rand_core::{OsRng, RngCore, SeedableRng};
use serde::{Deserialize, Serialize};

pub const TOKEN_CHARSET: [char; 88] = [
    'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's',
    't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L',
    'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', '0', '1', '2', '3', '4',
    '5', '6', '7', '8', '9', '!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '-', '_', '=', '+',
    '{', '}', '[', ']', '|', '\\', '/', '?', '>', '.', '<', ',',
];

pub const CHARSET_BASE_32: [char; 32] = [
    'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S',
    'T', 'U', 'V', 'W', 'X', 'Y', 'Z', '2', '3', '4', '5', '6', '7',
];

///prepares ChaCha20Rng with a 256 bit random seed generated by rand_core::os::OsRng which retrieves randomness from the host operating system
pub fn prepare_rng() -> ChaCha20Rng {
    let mut seed = [0u8; 32];
    OsRng.fill_bytes(&mut seed);
    ChaCha20Rng::from_seed(seed)
}

pub fn generate_token(length: usize) -> String {
    let mut rng = prepare_rng();
    let mut key = String::with_capacity(length);
    for _ in 0..length {
        key.push(TOKEN_CHARSET[rng.gen_range(0..TOKEN_CHARSET.len())]);
    }
    key
}

pub fn generate_random_base32_string(length: usize) -> String {
    let mut rng = prepare_rng();
    let mut key = String::with_capacity(length);
    for _ in 0..length {
        key.push(CHARSET_BASE_32[rng.gen_range(0..CHARSET_BASE_32.len())]);
    }
    key
}

#[derive(Debug, Serialize, Deserialize)]
pub struct JsonEncryptedDataWrapper {
    pub data: String,
}
